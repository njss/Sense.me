!function(){var jsonDatasource=function(settings,updateCallback){function updateRefresh(refreshTime){updateTimer&&clearInterval(updateTimer),updateTimer=setInterval(function(){self.updateNow()},refreshTime)}var self=this,updateTimer=null,currentSettings=settings,errorStage=0,lockErrorStage=!1;updateRefresh(1e3*currentSettings.refresh),this.updateNow=function(){if(!(errorStage>1&&!currentSettings.use_thingproxy||errorStage>2)){var requestURL=currentSettings.url;2==errorStage&&currentSettings.use_thingproxy&&(requestURL=("https:"==location.protocol?"https:":"http:")+"//thingproxy.freeboard.io/fetch/"+encodeURI(currentSettings.url));var body=currentSettings.body;if(body)try{body=JSON.parse(body)}catch(e){}$.ajax({url:requestURL,dataType:1==errorStage?"JSONP":"JSON",type:currentSettings.method||"GET",data:body,beforeSend:function(xhr){try{_.each(currentSettings.headers,function(header){var name=header.name,value=header.value;_.isUndefined(name)||_.isUndefined(value)||xhr.setRequestHeader(name,value)})}catch(e){}},success:function(data){lockErrorStage=!0,updateCallback(data)},error:function(){lockErrorStage||(errorStage++,self.updateNow())}})}},this.onDispose=function(){clearInterval(updateTimer),updateTimer=null},this.onSettingsChanged=function(newSettings){lockErrorStage=!1,errorStage=0,currentSettings=newSettings,updateRefresh(1e3*currentSettings.refresh),self.updateNow()}};freeboard.loadDatasourcePlugin({type_name:"JSON",settings:[{name:"url",display_name:"URL",type:"text"},{name:"use_thingproxy",display_name:"Try thingproxy",description:'A direct JSON connection will be tried first, if that fails, a JSONP connection will be tried. If that fails, you can use thingproxy, which can solve many connection problems to APIs. <a href="https://github.com/Freeboard/thingproxy" target="_blank">More information</a>.',type:"boolean",default_value:!0},{name:"refresh",display_name:"Refresh Every",type:"number",suffix:"seconds",default_value:5},{name:"method",display_name:"Method",type:"option",options:[{name:"GET",value:"GET"},{name:"POST",value:"POST"},{name:"PUT",value:"PUT"},{name:"DELETE",value:"DELETE"}]},{name:"body",display_name:"Body",type:"text",description:"The body of the request. Normally only used if method is POST"},{name:"headers",display_name:"Headers",type:"array",settings:[{name:"name",display_name:"Name",type:"text"},{name:"value",display_name:"Value",type:"text"}]}],newInstance:function(settings,newInstanceCallback,updateCallback){newInstanceCallback(new jsonDatasource(settings,updateCallback))}});var openWeatherMapDatasource=function(settings,updateCallback){function updateRefresh(refreshTime){updateTimer&&clearInterval(updateTimer),updateTimer=setInterval(function(){self.updateNow()},refreshTime)}function toTitleCase(str){return str.replace(/\w\S*/g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()})}var self=this,updateTimer=null,currentSettings=settings;updateRefresh(1e3*currentSettings.refresh),this.updateNow=function(){$.ajax({url:"http://api.openweathermap.org/data/2.5/weather?q="+encodeURIComponent(currentSettings.location)+"&units="+currentSettings.units,dataType:"JSONP",success:function(data){var newData={place_name:data.name,sunrise:new Date(1e3*data.sys.sunrise).toLocaleTimeString(),sunset:new Date(1e3*data.sys.sunset).toLocaleTimeString(),conditions:toTitleCase(data.weather[0].description),current_temp:data.main.temp,high_temp:data.main.temp_max,low_temp:data.main.temp_min,pressure:data.main.pressure,humidity:data.main.humidity,wind_speed:data.wind.speed,wind_direction:data.wind.deg};updateCallback(newData)},error:function(){}})},this.onDispose=function(){clearInterval(updateTimer),updateTimer=null},this.onSettingsChanged=function(newSettings){currentSettings=newSettings,self.updateNow(),updateRefresh(1e3*currentSettings.refresh)}};freeboard.loadDatasourcePlugin({type_name:"openweathermap",display_name:"Open Weather Map API",settings:[{name:"location",display_name:"Location",type:"text",description:"Example: London, UK"},{name:"units",display_name:"Units",type:"option","default":"imperial",options:[{name:"Imperial",value:"imperial"},{name:"Metric",value:"metric"}]},{name:"refresh",display_name:"Refresh Every",type:"number",suffix:"seconds",default_value:5}],newInstance:function(settings,newInstanceCallback,updateCallback){newInstanceCallback(new openWeatherMapDatasource(settings,updateCallback))}});var dweetioDatasource=function(settings,updateCallback){function onNewDweet(dweet){updateCallback(dweet)}var self=this,currentSettings=settings;this.updateNow=function(){dweetio.get_latest_dweet_for(currentSettings.thing_id,function(err,dweet){err||onNewDweet(dweet[0].content)})},this.onDispose=function(){},this.onSettingsChanged=function(newSettings){dweetio.stop_listening(),currentSettings=newSettings,dweetio.listen_for(currentSettings.thing_id,function(dweet){onNewDweet(dweet.content)})},self.onSettingsChanged(settings)};freeboard.loadDatasourcePlugin({type_name:"dweet_io",display_name:"Dweet.io",external_scripts:["http://dweet.io/client/dweet.io.min.js"],settings:[{name:"thing_id",display_name:"Thing Name",description:"Example: salty-dog-1",type:"text"}],newInstance:function(settings,newInstanceCallback,updateCallback){newInstanceCallback(new dweetioDatasource(settings,updateCallback))}});var playbackDatasource=function(settings,updateCallback){function moveNext(){currentDataset.length>0?(currentIndex<currentDataset.length&&(updateCallback(currentDataset[currentIndex]),currentIndex++),currentIndex>=currentDataset.length&&currentSettings.loop&&(currentIndex=0),currentIndex<currentDataset.length&&(currentTimeout=setTimeout(moveNext,1e3*currentSettings.refresh))):updateCallback({})}function stopTimeout(){currentDataset=[],currentIndex=0,currentTimeout&&(clearTimeout(currentTimeout),currentTimeout=null)}var currentTimeout,self=this,currentSettings=settings,currentDataset=[],currentIndex=0;this.updateNow=function(){stopTimeout(),$.ajax({url:currentSettings.datafile,dataType:currentSettings.is_jsonp?"JSONP":"JSON",success:function(data){currentDataset=_.isArray(data)?data:[],currentIndex=0,moveNext()},error:function(){}})},this.onDispose=function(){stopTimeout()},this.onSettingsChanged=function(newSettings){currentSettings=newSettings,self.updateNow()}};freeboard.loadDatasourcePlugin({type_name:"playback",display_name:"Playback",settings:[{name:"datafile",display_name:"Data File URL",type:"text",description:"A link to a JSON array of data."},{name:"is_jsonp",display_name:"Is JSONP",type:"boolean"},{name:"loop",display_name:"Loop",type:"boolean",description:"Rewind and loop when finished"},{name:"refresh",display_name:"Refresh Every",type:"number",suffix:"seconds",default_value:5}],newInstance:function(settings,newInstanceCallback,updateCallback){newInstanceCallback(new playbackDatasource(settings,updateCallback))}});var clockDatasource=function(settings,updateCallback){function stopTimer(){timer&&(clearTimeout(timer),timer=null)}function updateTimer(){stopTimer(),timer=setInterval(self.updateNow,1e3*currentSettings.refresh)}var timer,self=this,currentSettings=settings;this.updateNow=function(){var date=new Date,data={numeric_value:date.getTime(),full_string_value:date.toLocaleString(),date_string_value:date.toLocaleDateString(),time_string_value:date.toLocaleTimeString(),date_object:date};updateCallback(data)},this.onDispose=function(){stopTimer()},this.onSettingsChanged=function(newSettings){currentSettings=newSettings,updateTimer()},updateTimer()};freeboard.loadDatasourcePlugin({type_name:"clock",display_name:"Clock",settings:[{name:"refresh",display_name:"Refresh Every",type:"number",suffix:"seconds",default_value:1}],newInstance:function(settings,newInstanceCallback,updateCallback){newInstanceCallback(new clockDatasource(settings,updateCallback))}}),freeboard.loadDatasourcePlugin({type_name:"meshblu",display_name:"Octoblu",description:"app.octoblu.com",external_scripts:["http://meshblu.octoblu.com/js/meshblu.js"],settings:[{name:"uuid",display_name:"UUID",type:"text",default_value:"device uuid",description:"your device UUID",required:!0},{name:"token",display_name:"Token",type:"text",default_value:"device token",description:"your device TOKEN",required:!0},{name:"server",display_name:"Server",type:"text",default_value:"meshblu.octoblu.com",description:"your server",required:!0},{name:"port",display_name:"Port",type:"number",default_value:80,description:"server port",required:!0}],newInstance:function(settings,newInstanceCallback,updateCallback){newInstanceCallback(new meshbluSource(settings,updateCallback))}});var meshbluSource=function(settings,updateCallback){function getData(){var conn=skynet.createConnection({uuid:currentSettings.uuid,token:currentSettings.token,server:currentSettings.server,port:currentSettings.port});conn.on("ready",function(){conn.on("message",function(message){var newData=message;updateCallback(newData)})})}var self=this,currentSettings=settings;self.onSettingsChanged=function(newSettings){currentSettings=newSettings},self.updateNow=function(){getData()},self.onDispose=function(){}}}(),function(){function easeTransitionText(newValue,textElement,duration){var currentValue=$(textElement).text();if(currentValue!=newValue)if($.isNumeric(newValue)&&$.isNumeric(currentValue)){var numParts=newValue.toString().split("."),endingPrecision=0;numParts.length>1&&(endingPrecision=numParts[1].length),numParts=currentValue.toString().split(".");var startingPrecision=0;numParts.length>1&&(startingPrecision=numParts[1].length),jQuery({transitionValue:Number(currentValue),precisionValue:startingPrecision}).animate({transitionValue:Number(newValue),precisionValue:endingPrecision},{duration:duration,step:function(){$(textElement).text(this.transitionValue.toFixed(this.precisionValue))},done:function(){$(textElement).text(newValue)}})}else $(textElement).text(newValue)}function addSparklineLegend(element,legend){for(var legendElt=$("<div class='sparkline-legend'></div>"),i=0;i<legend.length;i++){var color=SPARKLINE_COLORS[i%SPARKLINE_COLORS.length],label=legend[i];legendElt.append("<div class='sparkline-legend-value'><span style='color:"+color+"'>&#9679;</span>"+label+"</div>")}element.empty().append(legendElt),freeboard.addStyle(".sparkline-legend","margin:5px;"),freeboard.addStyle(".sparkline-legend-value","color:white; font:10px arial,san serif; float:left; overflow:hidden; width:50%;"),freeboard.addStyle(".sparkline-legend-value span","font-weight:bold; padding-right:5px;")}function addValueToSparkline(element,value,legend){var values=$(element).data().values,valueMin=$(element).data().valueMin,valueMax=$(element).data().valueMax;values||(values=[],valueMin=void 0,valueMax=void 0);var collateValues=function(val,plotIndex){values[plotIndex]||(values[plotIndex]=[]),values[plotIndex].length>=SPARKLINE_HISTORY_LENGTH&&values[plotIndex].shift(),values[plotIndex].push(Number(val)),(void 0===valueMin||valueMin>val)&&(valueMin=val),(void 0===valueMax||val>valueMax)&&(valueMax=val)};_.isArray(value)?_.each(value,collateValues):collateValues(value,0),$(element).data().values=values,$(element).data().valueMin=valueMin,$(element).data().valueMax=valueMax;var tooltipHTML='<span style="color: {{color}}">&#9679;</span> {{y}}',composite=!1;_.each(values,function(valueArray,valueIndex){$(element).sparkline(valueArray,{type:"line",composite:composite,height:"100%",width:"100%",fillColor:!1,lineColor:SPARKLINE_COLORS[valueIndex%SPARKLINE_COLORS.length],lineWidth:2,spotRadius:3,spotColor:!1,minSpotColor:"#78AB49",maxSpotColor:"#78AB49",highlightSpotColor:"#9D3926",highlightLineColor:"#9D3926",chartRangeMin:valueMin,chartRangeMax:valueMax,tooltipFormat:legend&&legend[valueIndex]?tooltipHTML+" ("+legend[valueIndex]+")":tooltipHTML}),composite=!0})}var SPARKLINE_HISTORY_LENGTH=100,SPARKLINE_COLORS=["#FF9900","#FFFFFF","#B3B4B4","#6B6B6B","#28DE28","#13F7F9","#E6EE18","#C41204","#CA3CB8","#0B1CFB"],valueStyle=freeboard.getStyleString("values");freeboard.addStyle(".widget-big-text",valueStyle+"font-size:75px;"),freeboard.addStyle(".tw-display","width: 100%; height:100%; display:table; table-layout:fixed;"),freeboard.addStyle(".tw-tr","display:table-row;"),freeboard.addStyle(".tw-tg","display:table-row-group;"),freeboard.addStyle(".tw-tc","display:table-caption;"),freeboard.addStyle(".tw-td","display:table-cell;"),freeboard.addStyle(".tw-value",valueStyle+"overflow: hidden;display: inline-block;text-overflow: ellipsis;"),freeboard.addStyle(".tw-unit","display: inline-block;padding-left: 10px;padding-bottom: 1.1em;vertical-align: bottom;"),freeboard.addStyle(".tw-value-wrapper","position: relative;vertical-align: middle;height:100%;"),freeboard.addStyle(".tw-sparkline","height:20px;");var textWidget=function(settings){function updateValueSizing(){_.isUndefined(currentSettings.units)||""==currentSettings.units?valueElement.css("max-width","100%"):valueElement.css("max-width",displayElement.innerWidth()-unitsElement.outerWidth(!0)+"px")}var currentSettings=settings,displayElement=$('<div class="tw-display"></div>'),titleElement=$('<h2 class="section-title tw-title tw-td"></h2>'),valueElement=$('<div class="tw-value"></div>'),unitsElement=$('<div class="tw-unit"></div>'),sparklineElement=$('<div class="tw-sparkline tw-td"></div>');this.render=function(element){$(element).empty(),$(displayElement).append($('<div class="tw-tr"></div>').append(titleElement)).append($('<div class="tw-tr"></div>').append($('<div class="tw-value-wrapper tw-td"></div>').append(valueElement).append(unitsElement))).append($('<div class="tw-tr"></div>').append(sparklineElement)),$(element).append(displayElement),updateValueSizing()},this.onSettingsChanged=function(newSettings){currentSettings=newSettings;var shouldDisplayTitle=!_.isUndefined(newSettings.title)&&""!=newSettings.title,shouldDisplayUnits=!_.isUndefined(newSettings.units)&&""!=newSettings.units;newSettings.sparkline?sparklineElement.attr("style",null):(delete sparklineElement.data().values,sparklineElement.empty(),sparklineElement.hide()),shouldDisplayTitle?(titleElement.html(_.isUndefined(newSettings.title)?"":newSettings.title),titleElement.attr("style",null)):(titleElement.empty(),titleElement.hide()),shouldDisplayUnits?(unitsElement.html(_.isUndefined(newSettings.units)?"":newSettings.units),unitsElement.attr("style",null)):(unitsElement.empty(),unitsElement.hide());var valueFontSize=30;"big"==newSettings.size&&(valueFontSize=75,newSettings.sparkline&&(valueFontSize=60)),valueElement.css({"font-size":valueFontSize+"px"}),updateValueSizing()},this.onSizeChanged=function(){updateValueSizing()},this.onCalculatedValueChanged=function(settingName,newValue){"value"==settingName&&(currentSettings.animate?easeTransitionText(newValue,valueElement,500):valueElement.text(newValue),currentSettings.sparkline&&addValueToSparkline(sparklineElement,newValue))},this.onDispose=function(){},this.getHeight=function(){return"big"==currentSettings.size||currentSettings.sparkline?2:1},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"text_widget",display_name:"Text",external_scripts:["plugins/thirdparty/jquery.sparkline.min.js"],settings:[{name:"title",display_name:"Title",type:"text"},{name:"size",display_name:"Size",type:"option",options:[{name:"Regular",value:"regular"},{name:"Big",value:"big"}]},{name:"value",display_name:"Value",type:"calculated"},{name:"sparkline",display_name:"Include Sparkline",type:"boolean"},{name:"animate",display_name:"Animate Value Changes",type:"boolean",default_value:!0},{name:"units",display_name:"Units",type:"text"}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new textWidget(settings))}});var gaugeID=0;freeboard.addStyle(".gauge-widget-wrapper","width: 100%;text-align: center;"),freeboard.addStyle(".gauge-widget","width:200px;height:160px;display:inline-block;");var gaugeWidget=function(settings){function createGauge(){rendered&&(gaugeElement.empty(),gaugeObject=new JustGage({id:thisGaugeID,value:_.isUndefined(currentSettings.min_value)?0:currentSettings.min_value,min:_.isUndefined(currentSettings.min_value)?0:currentSettings.min_value,max:_.isUndefined(currentSettings.max_value)?0:currentSettings.max_value,label:currentSettings.units,showInnerShadow:!1,valueFontColor:"#d3d4d4"}))}var gaugeObject,thisGaugeID="gauge-"+gaugeID++,titleElement=$('<h2 class="section-title"></h2>'),gaugeElement=$('<div class="gauge-widget" id="'+thisGaugeID+'"></div>'),rendered=!1,currentSettings=settings;this.render=function(element){rendered=!0,$(element).append(titleElement).append($('<div class="gauge-widget-wrapper"></div>').append(gaugeElement)),createGauge()},this.onSettingsChanged=function(newSettings){newSettings.min_value!=currentSettings.min_value||newSettings.max_value!=currentSettings.max_value||newSettings.units!=currentSettings.units?(currentSettings=newSettings,createGauge()):currentSettings=newSettings,titleElement.html(newSettings.title)},this.onCalculatedValueChanged=function(settingName,newValue){_.isUndefined(gaugeObject)||gaugeObject.refresh(Number(newValue))},this.onDispose=function(){},this.getHeight=function(){return 3},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"gauge",display_name:"Gauge",external_scripts:["plugins/thirdparty/raphael.2.1.0.min.js","plugins/thirdparty/justgage.1.0.1.js"],settings:[{name:"title",display_name:"Title",type:"text"},{name:"value",display_name:"Value",type:"calculated"},{name:"units",display_name:"Units",type:"text"},{name:"min_value",display_name:"Minimum",type:"text",default_value:0},{name:"max_value",display_name:"Maximum",type:"text",default_value:100}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new gaugeWidget(settings))}}),freeboard.addStyle(".sparkline","width:100%;height: 75px;");var sparklineWidget=function(settings){var titleElement=$('<h2 class="section-title"></h2>'),sparklineElement=$('<div class="sparkline"></div>'),sparklineLegend=$("<div></div>"),currentSettings=settings;this.render=function(element){$(element).append(titleElement).append(sparklineElement).append(sparklineLegend)},this.onSettingsChanged=function(newSettings){currentSettings=newSettings,titleElement.html(_.isUndefined(newSettings.title)?"":newSettings.title),newSettings.include_legend&&addSparklineLegend(sparklineLegend,newSettings.legend.split(","))},this.onCalculatedValueChanged=function(settingName,newValue){currentSettings.legend?addValueToSparkline(sparklineElement,newValue,currentSettings.legend.split(",")):addValueToSparkline(sparklineElement,newValue)},this.onDispose=function(){},this.getHeight=function(){var legendHeight=0;if(currentSettings.include_legend&&currentSettings.legend){var legendLength=currentSettings.legend.split(",").length;legendLength>4?legendHeight=.5*Math.floor((legendLength-1)/4):legendLength&&(legendHeight=.5)}return 2+legendHeight},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"sparkline",display_name:"Sparkline",external_scripts:["plugins/thirdparty/jquery.sparkline.min.js"],settings:[{name:"title",display_name:"Title",type:"text"},{name:"value",display_name:"Value",type:"calculated",multi_input:"true"},{name:"include_legend",display_name:"Include Legend",type:"boolean"},{name:"legend",display_name:"Legend",type:"text",description:"Comma-separated for multiple sparklines"}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new sparklineWidget(settings))}}),freeboard.addStyle("div.pointer-value","position:absolute;height:95px;margin: auto;top: 0px;bottom: 0px;width: 100%;text-align:center;");var pointerWidget=function(settings){function polygonPath(points){if(!points||points.length<2)return[];var path=[];path.push(["m",points[0],points[1]]);for(var i=2;i<points.length;i+=2)path.push(["l",points[i],points[i+1]]);return path.push(["z"]),path}var paper,triangle,width,height,strokeWidth=3,currentValue=0,valueDiv=$('<div class="widget-big-text"></div>'),unitsDiv=$("<div></div>");this.render=function(element){width=$(element).width(),height=$(element).height();var radius=Math.min(width,height)/2-2*strokeWidth;paper=Raphael($(element).get()[0],width,height);var circle=paper.circle(width/2,height/2,radius);circle.attr("stroke","#FF9900"),circle.attr("stroke-width",strokeWidth),triangle=paper.path(polygonPath([width/2,height/2-radius+strokeWidth,15,20,-30,0])),triangle.attr("stroke-width",0),triangle.attr("fill","#fff"),$(element).append($('<div class="pointer-value"></div>').append(valueDiv).append(unitsDiv))},this.onSettingsChanged=function(newSettings){unitsDiv.html(newSettings.units)},this.onCalculatedValueChanged=function(settingName,newValue){if("direction"==settingName){if(!_.isUndefined(triangle)){triangle.animate({transform:"r"+newValue+","+width/2+","+height/2},250,"bounce")}currentValue=newValue}else"value_text"==settingName&&valueDiv.html(newValue)},this.onDispose=function(){},this.getHeight=function(){return 4},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"pointer",display_name:"Pointer",external_scripts:["plugins/thirdparty/raphael.2.1.0.min.js"],settings:[{name:"direction",display_name:"Direction",type:"calculated",description:"In degrees"},{name:"value_text",display_name:"Value Text",type:"calculated"},{name:"units",display_name:"Units",type:"text"}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new pointerWidget(settings))}});var pictureWidget=function(settings){function stopTimer(){timer&&(clearInterval(timer),timer=null)}function updateImage(){if(widgetElement&&imageURL){var cacheBreakerURL=imageURL+(-1==imageURL.indexOf("?")?"?":"&")+Date.now();$(widgetElement).css({"background-image":"url("+cacheBreakerURL+")"})}}var widgetElement,timer,imageURL;this.render=function(element){$(element).css({width:"100%",height:"100%","background-size":"cover","background-position":"center"}),widgetElement=element},this.onSettingsChanged=function(newSettings){stopTimer(),newSettings.refresh&&newSettings.refresh>0&&(timer=setInterval(updateImage,1e3*Number(newSettings.refresh)))},this.onCalculatedValueChanged=function(settingName,newValue){"src"==settingName&&(imageURL=newValue),updateImage()},this.onDispose=function(){stopTimer()},this.getHeight=function(){return 4},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"picture",display_name:"Picture",fill_size:!0,settings:[{name:"src",display_name:"Image URL",type:"calculated"},{type:"number",display_name:"Refresh every",name:"refresh",suffix:"seconds",description:"Leave blank if the image doesn't need to be refreshed"}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new pictureWidget(settings))}}),freeboard.addStyle(".indicator-light","border-radius:50%;width:22px;height:22px;border:2px solid #3d3d3d;margin-top:5px;float:left;background-color:#222;margin-right:10px;"),freeboard.addStyle(".indicator-light.on","background-color:#FFC773;box-shadow: 0px 0px 15px #FF9900;border-color:#FDF1DF;"),freeboard.addStyle(".indicator-text","margin-top:10px;");var indicatorWidget=function(settings){function updateState(){indicatorElement.toggleClass("on",isOn),stateElement.text(isOn?_.isUndefined(onText)?_.isUndefined(currentSettings.on_text)?"":currentSettings.on_text:onText:_.isUndefined(offText)?_.isUndefined(currentSettings.off_text)?"":currentSettings.off_text:offText)}var onText,offText,titleElement=$('<h2 class="section-title"></h2>'),stateElement=$('<div class="indicator-text"></div>'),indicatorElement=$('<div class="indicator-light"></div>'),currentSettings=settings,isOn=!1;this.render=function(element){$(element).append(titleElement).append(indicatorElement).append(stateElement)},this.onSettingsChanged=function(newSettings){currentSettings=newSettings,titleElement.html(_.isUndefined(newSettings.title)?"":newSettings.title),updateState()},this.onCalculatedValueChanged=function(settingName,newValue){"value"==settingName&&(isOn=Boolean(newValue)),"on_text"==settingName&&(onText=newValue),"off_text"==settingName&&(offText=newValue),updateState()},this.onDispose=function(){},this.getHeight=function(){return 1},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"indicator",display_name:"Indicator Light",settings:[{name:"title",display_name:"Title",type:"text"},{name:"value",display_name:"Value",type:"calculated"},{name:"on_text",display_name:"On Text",type:"calculated"},{name:"off_text",display_name:"Off Text",type:"calculated"}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new indicatorWidget(settings))}}),freeboard.addStyle(".gm-style-cc a","text-shadow:none;");var googleMapWidget=function(settings){function updatePosition(){if(map&&marker&&currentPosition.lat&&currentPosition.lon){var newLatLon=new google.maps.LatLng(currentPosition.lat,currentPosition.lon);marker.setPosition(newLatLon),map.panTo(newLatLon)}}var map,marker,currentSettings=settings,currentPosition={};this.render=function(element){function initializeMap(){var mapOptions={zoom:13,center:new google.maps.LatLng(37.235,-115.811111),disableDefaultUI:!0,draggable:!1,styles:[{featureType:"water",elementType:"geometry",stylers:[{color:"#2a2a2a"}]},{featureType:"landscape",elementType:"geometry",stylers:[{color:"#000000"},{lightness:20}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#000000"},{lightness:17}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#000000"},{lightness:29},{weight:.2}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#000000"},{lightness:18}]},{featureType:"road.local",elementType:"geometry",stylers:[{color:"#000000"},{lightness:16}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#000000"},{lightness:21}]},{elementType:"labels.text.stroke",stylers:[{visibility:"on"},{color:"#000000"},{lightness:16}]},{elementType:"labels.text.fill",stylers:[{saturation:36},{color:"#000000"},{lightness:40}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"geometry",stylers:[{color:"#000000"},{lightness:19}]},{featureType:"administrative",elementType:"geometry.fill",stylers:[{color:"#000000"},{lightness:20}]},{featureType:"administrative",elementType:"geometry.stroke",stylers:[{color:"#000000"},{lightness:17},{weight:1.2}]}]};map=new google.maps.Map(element,mapOptions),google.maps.event.addDomListener(element,"mouseenter",function(e){e.cancelBubble=!0,map.hover||(map.hover=!0,map.setOptions({zoomControl:!0}))}),google.maps.event.addDomListener(element,"mouseleave",function(){map.hover&&(map.setOptions({zoomControl:!1}),map.hover=!1)}),marker=new google.maps.Marker({map:map}),updatePosition()}window.google&&window.google.maps?initializeMap():(window.gmap_initialize=initializeMap,head.js("https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&callback=gmap_initialize"))},this.onSettingsChanged=function(newSettings){currentSettings=newSettings},this.onCalculatedValueChanged=function(settingName,newValue){"lat"==settingName?currentPosition.lat=newValue:"lon"==settingName&&(currentPosition.lon=newValue),updatePosition()},this.onDispose=function(){},this.getHeight=function(){return 4},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"google_map",display_name:"Google Map",fill_size:!0,settings:[{name:"lat",display_name:"Latitude",type:"calculated"},{name:"lon",display_name:"Longitude",type:"calculated"}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new googleMapWidget(settings))}}),freeboard.addStyle(".html-widget","white-space:normal;width:100%;height:100%");var htmlWidget=function(settings){var htmlElement=$('<div class="html-widget"></div>'),currentSettings=settings;this.render=function(element){$(element).append(htmlElement)},this.onSettingsChanged=function(newSettings){currentSettings=newSettings},this.onCalculatedValueChanged=function(settingName,newValue){"html"==settingName&&htmlElement.html(newValue)},this.onDispose=function(){},this.getHeight=function(){return Number(currentSettings.height)},this.onSettingsChanged(settings)};freeboard.loadWidgetPlugin({type_name:"html",display_name:"HTML",fill_size:!0,settings:[{name:"html",display_name:"HTML",type:"calculated",description:"Can be literal HTML, or javascript that outputs HTML."},{name:"height",display_name:"Height Blocks",type:"number",default_value:4,description:"A height block is around 60 pixels"}],newInstance:function(settings,newInstanceCallback){newInstanceCallback(new htmlWidget(settings))}})}();