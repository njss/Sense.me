{
	"version": 1,
	"allow_edit": true,
	"plugins": [],
	"panes": [
		{
			"title": "Heatmap",
			"width": 1,
			"row": {
				"3": 2
			},
			"col": {
				"3": 1
			},
			"col_width": 20,			
			"widgets": [
				{
					"type": "mach_d3_plugin",
					"settings": {
						"data": "",
						"html": "<div id=\"heatmap\"></div>",
						"code": " var classesNumber = 10,\n    cellSize = 100;\n\n\n\n\n//#########################################################\nfunction heatmap_display(url, heatmapId, paletteName) {\n\n\n\n\n\n\n\n\n    //##########################################################################\n    // Patrick.Brockmann@lsce.ipsl.fr\n    //##########################################################################\n    \n    //==================================================\n    // References\n    // http://bl.ocks.org/Soylent/bbff6cc507dca2f48792\n    // http://bost.ocks.org/mike/selection/\n    // http://bost.ocks.org/mike/join/\n    // http://stackoverflow.com/questions/9481497/understanding-how-d3-js-binds-data-to-nodes\n    // http://bost.ocks.org/mike/miserables/\n    // http://bl.ocks.org/ianyfchang/8119685\n\n\n\n\n    //==================================================\n    var tooltip = d3.select(heatmapId)\n        .append(\"div\")\n        .style(\"position\", \"absolute\")\n        .style(\"visibility\", \"hidden\");\n\n\n\n\n    //==================================================\n    // http://bl.ocks.org/mbostock/3680958\n    function zoom() {\n      svg.attr(\"transform\", \"translate(\" + d3.event.translate + \")scale(\" + d3.event.scale + \")\");\n    }\n\n\n\n\n    // define the zoomListener which calls the zoom function on the \"zoom\" event constrained within the scaleExtents\n    var zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on(\"zoom\", zoom);\n\n\n\n\n    //==================================================\n    var viewerWidth = $(document).width();\n    var viewerHeight = $(document).height();\n    var viewerPosTop = 230;\n    var viewerPosLeft = 45;\n\n\n\n\n    var legendElementWidth = cellSize/2 * 2;\n\n\n\n\n    // http://bl.ocks.org/mbostock/5577023\n    var colors = colorbrewer[paletteName][classesNumber];\n\n\n\n\n    // http://bl.ocks.org/mbostock/3680999\n    var svg;\n\n\n\n\n    //==================================================\n    d3.json(url, function(error, data) {\n\n\n\n\n        //console.log(data);\n        var arr = data.data;\n        var row_number = arr.length;\n        var col_number = arr[0].length;\n        //console.log(col_number, row_number);\n\n\n\n\n        var colorScale = d3.scale.quantize()\n            .domain([0.0, 1.0])\n            .range(colors);\n\n\n\n\n        svg = d3.select(heatmapId).append(\"svg\")\n            .attr(\"width\", viewerWidth)\n            .attr(\"height\", viewerHeight)\n      //.call(zoomListener)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + viewerPosLeft + \",\" + viewerPosTop/2 + \")\");\n\n\n\n\n        svg.append('defs')\n            .append('pattern')\n            .attr('id', 'diagonalHatch')\n            .attr('patternUnits', 'userSpaceOnUse')\n            .attr('width', 4)\n            .attr('height', 4)\n            .append('path')\n            .attr('d', 'M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2')\n            .attr('stroke', '#000000')\n            .attr('stroke-width', 1);\n\n\n\n\n        var rowSortOrder = false;\n        var colSortOrder = false;\n\n\n\n\n        var rowLabels = svg.append(\"g\")\n            .attr(\"class\", \"rowLabels\")\n            .selectAll(\".rowLabel\")\n            .data(data.index)\n            .enter().append(\"text\")\n            .text(function(d) {\n                console.log(\"count: \" + d.count);\n                return d[1]; //.join(\"/\") : d;\n            })\n            .attr(\"x\", 0)\n            .attr(\"y\", function(d, i) {\n                return (i * cellSize);\n            })\n            .style(\"text-anchor\", \"end\")\n            .attr(\"transform\", function(d, i) {\n                return \"translate(-3,\" + cellSize / 1.5 + \")\";\n            })\n            .attr(\"class\", \"rowLabel mono\")\n            .attr(\"id\", function(d, i) {\n                return \"rowLabel_\" + i;\n            })\n            .on('mouseover', function(d, i) {\n                d3.select('#rowLabel_' + i).classed(\"hover\", true);\n            })\n            .on('mouseout', function(d, i) {\n                d3.select('#rowLabel_' + i).classed(\"hover\", false);\n            })\n            .on(\"click\", function(d, i) {\n                rowSortOrder = !rowSortOrder;\n                sortByValues(\"r\", i, rowSortOrder);\n                d3.select(\"#order\").property(\"selectedIndex\", 0);\n                //$(\"#order\").jqxComboBox({selectedIndex: 0});\n            });\n\n\n\n\n        var colLabels = svg.append(\"g\")\n            .attr(\"class\", \"colLabels\")\n            .selectAll(\".colLabel\")\n            .data(data.columns)\n            .enter().append(\"text\")\n            .text(function(d) {\n                d.shift();\n                return d[0];\n                //return d.count > 1 ? d.reverse().join(\"/\") : d.reverse();\n            })\n            .attr(\"x\", 0)\n            .attr(\"y\", function(d, i) {\n                return (i * cellSize);\n            })\n            .style(\"text-anchor\", \"left\")\n            .attr(\"transform\", function(d, i) {\n                return \"translate(\" + cellSize / 2 + \", -3) rotate(-90) rotate(45, 0, \" + (i * cellSize) + \")\";\n            })\n            .attr(\"class\", \"colLabel mono\")\n            .attr(\"id\", function(d, i) {\n                return \"colLabel_\" + i;\n            })\n            .on('mouseover', function(d, i) {\n                d3.select('#colLabel_' + i).classed(\"hover\", true);\n            })\n            .on('mouseout', function(d, i) {\n                d3.select('#colLabel_' + i).classed(\"hover\", false);\n            })\n            .on(\"click\", function(d, i) {\n                colSortOrder = !colSortOrder;\n                sortByValues(\"c\", i, colSortOrder);\n                d3.select(\"#order\").property(\"selectedIndex\", 0);\n            });\n\n\n\n\n        var row = svg.selectAll(\".row\")\n            .data(data.data)\n            .enter().append(\"g\")\n            .attr(\"id\", function(d) {\n                return d.idx;\n            })\n            .attr(\"class\", \"row\");\n\n\n\n\n        var j = 0;\n        var heatMap = row.selectAll(\".cell\")\n            .data(function(d) {\n                j++;\n                return d;\n            })\n            .enter().append(\"svg:rect\")\n            .attr(\"x\", function(d, i) {\n                return i * cellSize;\n            })\n            .attr(\"y\", function(d, i, j) {\n                return j * cellSize;\n            })\n            .attr(\"rx\", 4)\n            .attr(\"ry\", 4)\n            .attr(\"class\", function(d, i, j) {\n                return \"cell bordered cr\" + j + \" cc\" + i;\n            })\n            .attr(\"row\", function(d, i, j) {\n                return j;\n            })\n            .attr(\"col\", function(d, i, j) {\n                return i;\n            })\n            .attr(\"width\", cellSize)\n            .attr(\"height\", cellSize)\n            .style(\"fill\", function(d) {\n                if (d != null) return colorScale(d);\n                else return \"url(#diagonalHatch)\";\n            })\n            .on('mouseover', function(d, i, j) {\n                d3.select('#colLabel_' + i).classed(\"hover\", true);\n                d3.select('#rowLabel_' + j).classed(\"hover\", true);\n                if (d != null) {\n                    tooltip.html('<div class=\"heatmap_tooltip\">' + d.toFixed(3) + '</div>');\n                    tooltip.style(\"visibility\", \"visible\");\n                } else\n                    tooltip.style(\"visibility\", \"hidden\");\n            })\n            .on('mouseout', function(d, i, j) {\n                d3.select('#colLabel_' + i).classed(\"hover\", false);\n                d3.select('#rowLabel_' + j).classed(\"hover\", false);\n                tooltip.style(\"visibility\", \"hidden\");\n            })\n            .on(\"mousemove\", function(d, i) {\n                tooltip.style(\"top\", (d3.event.pageY - 55) + \"px\").style(\"left\", (d3.event.pageX - 60) + \"px\");\n            })\n            .on('click', function() {\n                //console.log(d3.select(this));\n            });\n\n\n\n\n        var legend = svg.append(\"g\")\n            .attr(\"class\", \"legend\")\n            .attr(\"transform\", \"translate(0,-300)\")\n            .selectAll(\".legendElement\")\n            .data([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n            .enter().append(\"g\")\n            .attr(\"class\", \"legendElement\");\n\n\n\n\n        legend.append(\"svg:rect\")\n            .attr(\"x\", function(d, i) {\n                return ((legendElementWidth) * i)/1.25;\n            })\n            .attr(\"y\", viewerPosTop)\n            .attr(\"class\", \"cellLegend bordered\")\n            .attr(\"width\", legendElementWidth/1.25)\n            .attr(\"height\", cellSize / 3)\n            .style(\"fill\", function(d, i) {\n                return colors[i];\n            });\n\n\n\n\n        legend.append(\"text\")\n            .attr(\"class\", \"mono legendElement\")\n            .text(function(d) {\n                return \"≥\" + Math.round(d * 100) / 100;\n            })\n            .attr(\"x\", function(d, i) {\n                return (legendElementWidth * i)/1.25;\n            })\n            .attr(\"y\", viewerPosTop - cellSize/15);\n\n\n\n\n        //==================================================\n        // Change ordering of cells\n        function sortByValues(rORc, i, sortOrder) {\n            var t = svg.transition().duration(1000);\n            var values = [];\n            var sorted;\n            d3.selectAll(\".c\" + rORc + i)\n                .filter(function(d) {\n                    if (d != null) values.push(d);\n                    else values.push(-999); // to handle NaN\n                });\n            //console.log(values);    \n            if (rORc == \"r\") { // sort on cols\n                sorted = d3.range(col_number).sort(function(a, b) {\n                    if (sortOrder) {\n                        return values[b] - values[a];\n                    } else {\n                        return values[a] - values[b];\n                    }\n                });\n                t.selectAll(\".cell\")\n                    .attr(\"x\", function(d) {\n                        var col = parseInt(d3.select(this).attr(\"col\"));\n                        return sorted.indexOf(col) * cellSize;\n                    });\n                t.selectAll(\".colLabel\")\n                    .attr(\"y\", function(d, i) {\n                        return sorted.indexOf(i) * cellSize;\n                    })\n                    .attr(\"transform\", function(d, i) {\n                        return \"translate(\" + cellSize / 2 + \", -3) rotate(-90) rotate(45, 0, \" + (sorted.indexOf(i) * cellSize) + \")\";\n                    });\n            } else { // sort on rows\n                sorted = d3.range(row_number).sort(function(a, b) {\n                    if (sortOrder) {\n                        return values[b] - values[a];\n                    } else {\n                        return values[a] - values[b];\n                    }\n                });\n                t.selectAll(\".cell\")\n                    .attr(\"y\", function(d) {\n                        var row = parseInt(d3.select(this).attr(\"row\"));\n                        return sorted.indexOf(row) * cellSize;\n                    });\n                t.selectAll(\".rowLabel\")\n                    .attr(\"y\", function(d, i) {\n                        return sorted.indexOf(i) * cellSize;\n                    })\n                    .attr(\"transform\", function(d, i) {\n                        return \"translate(-3,\" + cellSize / 1.5 + \")\";\n                    });\n            }\n        }\n\n\n\n\n        //==================================================\n        d3.select(\"#order\").on(\"change\", function() {\n      var newOrder = d3.select(\"#order\").property(\"value\"); \n            changeOrder(newOrder, heatmapId);\n        });\n\n\n\n\n        //==================================================\n        d3.select(\"#palette\")\n            .on(\"keyup\", function() {\n    var newPalette = d3.select(\"#palette\").property(\"value\");\n    if (newPalette != null)           // when interfaced with jQwidget, the ComboBox handles keyup event but value is then not available ?\n                  changePalette(newPalette, heatmapId);\n            })\n            .on(\"change\", function() {\n    var newPalette = d3.select(\"#palette\").property(\"value\");\n                changePalette(newPalette, heatmapId);\n            });\n    });\n\n\n\n\n    //==================================================\n}\n\n\n\n\n//#########################################################\nfunction changeOrder(newOrder, heatmapId) {\n    var svg = d3.select(heatmapId);\n    var t = svg.transition().duration(1000);\n    if (newOrder == \"sortinit_col\") { // initial sort on cols (alphabetically if produced like this)\n        t.selectAll(\".cell\")\n            .attr(\"x\", function(d) {\n                var col = parseInt(d3.select(this).attr(\"col\"));\n                return col * cellSize;\n            });\n        t.selectAll(\".colLabel\")\n            .attr(\"y\", function(d, i) {\n                return i * cellSize;\n            })\n            .attr(\"transform\", function(d, i) {\n                return \"translate(\" + cellSize / 2 + \", -3) rotate(-90) rotate(45, 0, \" + (i * cellSize) + \")\";\n            });\n    } else if (newOrder == \"sortinit_row\") { // initial sort on rows (alphabetically if produced like this)\n        t.selectAll(\".cell\")\n            .attr(\"y\", function(d) {\n                var row = parseInt(d3.select(this).attr(\"row\"));\n                return row * cellSize;\n            });\n        t.selectAll(\".rowLabel\")\n            .attr(\"y\", function(d, i) {\n                return i * cellSize;\n            })\n            .attr(\"transform\", function(d, i) {\n                return \"translate(-3,\" + cellSize / 1.5 + \")\";\n            });\n    } else if (newOrder == \"sortinit_col_row\") { // initial sort on rows and cols (alphabetically if produced like this)\n        t.selectAll(\".cell\")\n            .attr(\"x\", function(d) {\n                var col = parseInt(d3.select(this).attr(\"col\"));\n                return col * cellSize;\n            })\n            .attr(\"y\", function(d) {\n                var row = parseInt(d3.select(this).attr(\"row\"));\n                return row * cellSize;\n            });\n        t.selectAll(\".colLabel\")\n            .attr(\"y\", function(d, i) {\n                return i * cellSize;\n            })\n            .attr(\"transform\", function(d, i) {\n                return \"translate(\" + cellSize / 2 + \", -3) rotate(-90) rotate(45, 0, \" + (i * cellSize) + \")\";\n            });\n        t.selectAll(\".rowLabel\")\n            .attr(\"y\", function(d, i) {\n                return i * cellSize;\n            })\n            .attr(\"transform\", function(d, i) {\n                return \"translate(-3,\" + cellSize / 1.5 + \")\";\n            });\n    }\n}\n\n\n\n\n//#########################################################\nfunction changePalette(paletteName, heatmapId) {\n    var colors = colorbrewer[paletteName][classesNumber];\n    var colorScale = d3.scale.quantize()\n        .domain([0.0, 1.0])\n        .range(colors);\n    var svg = d3.select(heatmapId);\n    var t = svg.transition().duration(500);\n    t.selectAll(\".cell\")\n        .style(\"fill\", function(d) {\n                if (d != null) return colorScale(d);\n                else return \"url(#diagonalHatch)\";\n        })\n    t.selectAll(\".cellLegend\")\n        .style(\"fill\", function(d, i) {\n            return colors[i];\n        });\n}\n//$(document).ready(function() {\n    console.log(\"test\");\n  heatmap_display(\"http://localhost:3000/db\", \"#heatmap\", \"Spectral\");\n//});",
						"sizeInBlocks": 10
					}
				}
			]
		}
	],
	"datasources": [],
	"columns": 3
}